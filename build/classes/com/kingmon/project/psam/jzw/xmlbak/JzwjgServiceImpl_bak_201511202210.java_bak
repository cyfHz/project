package com.kingmon.project.psam.jzw.serivice.impl;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.kingmon.base.common.KConstants;
import com.kingmon.base.data.DataSet;
import com.kingmon.base.data.KJSONMSG;
import com.kingmon.base.data.ParamObject;
import com.kingmon.base.exception.ServiceLogicalException;
import com.kingmon.base.service.BaseService;
import com.kingmon.base.util.AlertSLEUtil;
import com.kingmon.base.util.KAssert;
import com.kingmon.base.util.PaginationUtil;
import com.kingmon.common.authUtil.SecurityUtils;
import com.kingmon.project.psam.jzw.mapper.JzwdyMapper;
import com.kingmon.project.psam.jzw.mapper.JzwfjMapper;
import com.kingmon.project.psam.jzw.mapper.JzwjgMapper;
import com.kingmon.project.psam.jzw.mapper.JzwlcMapper;
import com.kingmon.project.psam.jzw.model.Jzwdy;
import com.kingmon.project.psam.jzw.model.Jzwfj;
import com.kingmon.project.psam.jzw.model.Jzwjg;
import com.kingmon.project.psam.jzw.model.Jzwlc;
import com.kingmon.project.psam.jzw.serivice.IJzwjgService;
import com.kingmon.project.psam.jzw.view.JzwFjShowInPage;
//@Service
public class JzwjgServiceImpl_bak_201511202210 extends BaseService implements IJzwjgService{

	@Autowired
	private JzwjgMapper jzwjgMapper;
	@Autowired
	private JzwfjMapper jzwfjMapper;
	@Autowired
	private JzwlcMapper jzwlcMapper;
	@Autowired
	private JzwdyMapper jzwdyMapper;
	
	@Transactional(rollbackFor=Exception.class,readOnly=true)
	@Override
	public DataSet loadJzwjgDataSet(ParamObject po) {
		StringBuilder sql = new StringBuilder("");
		sql.append("SELECT jg.*,xx.JZWMC as JZWMC ");
		sql.append(" @from DZ_JZWJG jg ");
		sql.append(" left join DZ_JZWJBXX xx ");
		sql.append(" on jg.JZWID=xx.DZBM ");
		sql.append(" where 1=1 ");
		if (po.hasOrder()) {
			sql.append(" order by ").append("jg.").append(po.getSort()).append(" ").append(po.getOrder()).append(" ");
		}
		return getJdbcBaseDao().jdbcLoadDataSet(sql.toString(), po);
	}
	@Transactional(rollbackFor=Exception.class)
	@Override
	public void addJzwjg(Jzwjg jzwjg,String jzwId) {
		jzwjg.setJzwid(jzwId);
		jzwjg.setJzwjgid(jzwId);
		short dys=jzwjg.getDys();//单元数
		short lcs=jzwjg.getLcs();///楼层数
		short fjs=jzwjg.getMdyms();//每单元门数
		jzwjgMapper.insertSelective(jzwjg);
		for(int d=0;d<dys;d++){
			Jzwdy jzwdy=JzwJgUtil.constructJzwDy(jzwjg.getJzwjgid(),""+(d+1),(d+1)+"单元",lcs,fjs);
			jzwdyMapper.insertSelective(jzwdy);
			for(int c=0;c<lcs;c++){
				Jzwlc jzwlc=JzwJgUtil.constructJzwLc(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),""+(c+1),(c+1)+"层");
				jzwlcMapper.insertSelective(jzwlc);
				for(int f=0;f<fjs;f++){
					int width=KConstants.jzwWidth;//100;
					int height=KConstants.jzwHeight;//100;
					int left=((fjs*d)+f)*width;
					int top=(lcs-(c+1))*height;
					String name=(c+1)+"-"+(d+1)+"-"+(c+1)+"0"+(f+1);
					JzwFjShowInPage page=new JzwFjShowInPage(1,  left,  top,width,  height);
					Jzwfj jzwfj=JzwJgUtil.constructJzwFj(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),jzwlc.getJzwlcid(),name,name,page);
					jzwfjMapper.insertSelective(jzwfj);
				}
			}
		}
	}
	
	/*{
	"jzwjg":{"dys":"4","lcs":"10","mdyms":"2","dxcs":"3","dxmcms":"2"},
	"jzwId":"ed28d485-a5f4-4b17-9efb-eae1e6ba243c",
	"prefixRules":[{"from":"1","to":"3","value":"A"},
				   {"from":"4","to":"6","value":"B"}],
	"postfixAndWidthRule":{"postfix_dy":"单元","postfix_lc":"层","postfix_fj":"室",
						   "width_dy":"2","width_lc":"3","width_fj":"2"},
	"type":"1"}*/
	@Transactional(rollbackFor=Exception.class)
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public void addJzwjg(Map view) {
		//记得修改。。。。* ### // jzwId="0fdbf914-0841-4061-9ee7-d838e65650c5";
		String jzwId = (String )(view.get("jzwId"));//建筑物Id
		KAssert.notNull(jzwId, "请选择建筑物");
		boolean isRegular = Boolean.parseBoolean((String)(view.get("isRegular")));//单元楼层房间是否规则分布
		validateMap(view);//数据校验
		Long t1 = System.currentTimeMillis();
		Date date=new Date();
		// 单元/楼层/房间 后缀 ,提取单元号/楼层号/房间号 位数--->postfix_dy,postfix_lc,postfix_fj,width_dy,width_lc,width_fj
		Map<String, Object> postfixAndWidthRule = (Map<String, Object>)view.get("postfixAndWidthRule");
		
		postfixAndWidthRule= (Map<String, Object>) (postfixAndWidthRule==null?Maps.newHashMap():postfixAndWidthRule);
		
		Map<String, Object> jzwjgMap = (Map<String, Object>)view.get("jzwjg");//建筑物结构View
		
		List<Map<String, Object>> prefixRules = (List<Map<String, Object>>)view.get("prefixRules");
		List<Map<String, Object>> dylcfjRules = (List<Map<String, Object>>)view.get("dylcfjRules");
		
		String type = (String)view.get("type");//0：无地下室   1：规则分单元地下室   2：不规则地下室
		
		String postfix_dy = (String)(postfixAndWidthRule.get("postfix_dy"));//单元后缀--单元名称用到
		postfix_dy=(postfix_dy==null?"":postfix_dy);
		
		String postfix_lc = (String)(postfixAndWidthRule.get("postfix_lc"));//楼层后缀--楼层名称用到
		postfix_lc=(postfix_lc==null?"":postfix_lc);
		
		String postfix_fj = (String)(postfixAndWidthRule.get("postfix_fj"));//房间后缀--房间名称用到
		postfix_fj=(postfix_fj==null?"":postfix_fj);
		
		int width_dy = Integer.parseInt((String)(postfixAndWidthRule.get("width_dy")));//单元号位数--单元名称用到
		int width_lc = Integer.parseInt((String)(postfixAndWidthRule.get("width_lc")));//楼层号位数--楼层名称用到
		int width_fj = Integer.parseInt((String)(postfixAndWidthRule.get("width_fj")));//房间号位数--房间名称用到
		
		String dys_ = (String)(jzwjgMap.get("dys"));//建筑物结构-单元数
		String lcs_ = (String)(jzwjgMap.get("lcs"));//建筑物结构-楼层数
		String mdyms = (String)(jzwjgMap.get("mdyms"));//建筑物结构-单元门数
		
		String dxcs =(String)(jzwjgMap.get("dxcs"));//建筑物结构-地下层数
		String dxmcms =(String)(jzwjgMap.get("dxmcms"));//建筑物结构-地下每单元门数
		dxcs=(dxcs==null||"".equals(dxcs))?"0":dxcs;
		dxmcms=(dxmcms==null||"".equals(dxmcms))?"0":dxmcms;
		
		short dys=Short.MIN_VALUE,
				lcs=Short.MIN_VALUE,
				fjs=Short.MIN_VALUE,
				dxcsx=Short.MIN_VALUE,
				dxmcmsx=Short.MIN_VALUE;
		try{
			dys=Short.parseShort(dys_);      if(dys<0){AlertSLEUtil.Error("单元数不能小于0");}
			lcs=Short.parseShort(lcs_);		 if(lcs<0){AlertSLEUtil.Error("楼层数不能小于0");}
			fjs=Short.parseShort(mdyms);	 if(fjs<0){AlertSLEUtil.Error("单元门数不能小于0");}
			dxcsx=Short.parseShort(dxcs);	 if(dxcsx<0){AlertSLEUtil.Error("地下楼层数不能小于0");}
											 if(dxcsx>100){AlertSLEUtil.Error("地下楼层数不能大于100");}
			dxmcmsx=Short.parseShort(dxmcms);if(dxmcmsx<0){AlertSLEUtil.Error("地下单元门数不能小于0");}
		}catch(Exception e){
			throw new ServiceLogicalException("数据转化错误，请检查楼层数、单元数、地下层数、地下每层门数等是否是数字");
		}
		//构造/建筑物结构model
		Jzwjg jzwjg = new Jzwjg( jzwId,jzwId,jzwId, dys,lcs,fjs, dxcsx,dxmcmsx, "1","1", date,date,  "1","1");
		jzwjgMapper.insertSelective(jzwjg);
//------------------------------------创建建筑物结构开始-------------------------------------------------------------------------------				
		ArrayList<Jzwfj> jzwfjList = Lists.newArrayList();
		//作为不规则地下楼层及房间的统一单元
		String dxJzwdyId = ""; 
		
		Map<Integer, List<int[]>> dylcfjMap=Maps.newHashMap();
		List<int[]> list = new ArrayList<int[]>();
		//建筑物最大层数
		int lcMax=0;
		//单元及其对应的最大宽度  格式：<dyIndex, widthMax>
		Map<Integer, Integer> dyWidthMaxMap = Maps.newHashMap();
		//添加地上楼层房间
		for(int d=0;d<dys;d++){
			//处理单元名称  长度+后缀
			String dymc = JzwJgUtil.processWithAndPostfix((d+1)+"",width_dy,postfix_dy);
			Jzwdy jzwdy=JzwJgUtil.constructJzwDy(jzwjg.getJzwjgid(),JzwJgUtil.processDyLcXh((""+(d+1)),3),dymc,lcs,fjs);
			jzwdyMapper.insertSelective(jzwdy);
			if (d==0) {//处理 地下房间不依附单元的情况，地下房间，全部默认在第一单元
				dxJzwdyId = jzwdy.getJzwdyid();
				if(!isRegular){
					for(int i=0;i<dylcfjRules.size();i++){
						Map<String, Object> map = dylcfjRules.get(i);
						int dyIndex =Integer.MIN_VALUE;
						int lcfrom =Integer.MIN_VALUE;
						int lcto   =Integer.MIN_VALUE;
						int mcfjs  =Integer.MIN_VALUE;
						try{
							dyIndex=Integer.parseInt((String)map.get("dyIndex")); if(dyIndex<0){AlertSLEUtil.Error("单元号不能小于0");}
							lcfrom=Integer.parseInt((String)map.get("lcfrom"));   if(lcfrom<0){AlertSLEUtil.Error("起始楼层号不能小于0");}
							lcto = Integer.parseInt((String)map.get("lcto"));	if(lcto<0){AlertSLEUtil.Error("结束楼层号不能小于0");}	
							mcfjs = Integer.parseInt((String)map.get("mcfjs"));	if(mcfjs<0){AlertSLEUtil.Error("每层房间数不能小于0");}
						}catch(Exception e){
							throw new ServiceLogicalException("数据转化错误，请检查单元楼层房间规则是否是数字");
						}
						if (dylcfjMap.get(dyIndex)==null) {
							List<int[]> list2 = new ArrayList<int[]>();
							list2.add(new int[]{lcfrom,lcto});
							dylcfjMap.put(dyIndex,list2);
						}else{
							dylcfjMap.get(dyIndex).add(new int[]{lcfrom,lcto});
						}
						//找出最高楼层
						if (lcto>lcMax) {
							lcMax = lcto;
						}
						if (dyWidthMaxMap.get(dyIndex)==null) {
							dyWidthMaxMap.put(dyIndex, mcfjs);
						}else{
							Integer oldFjs = dyWidthMaxMap.get(dyIndex);
							dyWidthMaxMap.put(dyIndex, mcfjs>oldFjs?mcfjs:oldFjs);
						}
					}
					
					KAssert.isTrue(JzwJgUtil.validate(dylcfjMap), "数据转化错误，楼层数存在交叉或者不连续情况");
				}
			}
			int leftWidthSum = 0;
			if(isRegular){//地上单元楼层房间规则排列
			
				for(int c=0;c<lcs;c++){
					//处理楼层名称  长度+后缀
					String lcmc = JzwJgUtil.processWithAndPostfix((c+1)+"",width_lc,postfix_lc);
	//				Jzwlc jzwlc=JzwJgUtil.constructJzwLc(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),JzwJgUtil.processDyLcXh((""+(c+1)),3),lcmc);
					Jzwlc jzwlc=JzwJgUtil.constructJzwLc(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),""+(c+1),lcmc);
					jzwlcMapper.insertSelective(jzwlc);
					
					for(int f=0;f<fjs;f++){
						//构造房间
						int width=KConstants.jzwWidth;//120;
						int height=KConstants.jzwHeight;//70;
						int left=((fjs*d)+f)*width;
						int top=(lcs-(c+1))*height;
						//处理房间名称  长度+后缀
						 String fjmc= (c+1)+((f+1)<10?("0"+(f+1)):(""+(f+1)));
						 fjmc = JzwJgUtil.processWithAndPostfix(fjmc,width_fj,postfix_fj);
						
						//房间名称添加前缀
						for (int i = 0; i < prefixRules.size(); i++) {
							Map<String, Object> map = prefixRules.get(i);
							int from =Integer.MIN_VALUE;
							int to   =Integer.MIN_VALUE;
							try{
								from=Integer.parseInt((String)map.get("from")); if(from<0){AlertSLEUtil.Error("房间号前缀起始楼层不能小于0");}
								to = Integer.parseInt((String)map.get("to"));	if(to<0){  AlertSLEUtil.Error("房间号前缀结束楼层不能小于0");}
							}catch(Exception e){
								throw new ServiceLogicalException("数据转化错误，请检查房间号前缀起始、结束楼层是否是数字");
							}
							String value = (String)map.get("value");//前缀
							if ((c+1>=from)&&(c+1<=to) ) {
								fjmc = value+fjmc;
							}
						}
	//					fjmc=dymc+lcmc+fjmc;
						//单元 、层、
	//					String fjxh=(d+1)+"-"+(c+1)+"-"+(c+1)+"0"+(f+1);
						//不再带有单元楼层前缀
						String fjxh=(c+1)+((f+1)<10?("0"+(f+1)):(""+(f+1)));
						JzwFjShowInPage page=new JzwFjShowInPage(1,  left,  top,width,  height);
						Jzwfj jzwfj=JzwJgUtil.constructJzwFj(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),jzwlc.getJzwlcid(),fjxh,fjmc,page);
						jzwfj.setCreatedby(SecurityUtils.getUserId());
						jzwfjList.add(jzwfj);
					}
					//jzwfjMapper.batchInsertJzwfj(jzwfjList);
				}
			}else{//楼上单元楼层房间不规则分布
				
				for(int i=0;i<dylcfjRules.size();i++){
					Map<String, Object> map = dylcfjRules.get(i);
					int dyIndex =Integer.MIN_VALUE;
					int lcfrom =Integer.MIN_VALUE;
					int lcto   =Integer.MIN_VALUE;
					int mcfjs  =Integer.MIN_VALUE;
					dyIndex=Integer.parseInt((String)map.get("dyIndex")); 
					lcfrom=Integer.parseInt((String)map.get("lcfrom")); 
					lcto = Integer.parseInt((String)map.get("lcto"));	
					mcfjs = Integer.parseInt((String)map.get("mcfjs"));	
					//如果当前单元号处与 规则定义的的单元范围内，则对其根据相应规则生成房间
					if ((d+1)==dyIndex) {
						int widthMax = dyWidthMaxMap.get(dyIndex);
						
						for(int j=lcfrom;j<=lcto;j++){
							String lcmc = JzwJgUtil.processWithAndPostfix(""+j,width_lc,postfix_lc);
							Jzwlc jzwlc=JzwJgUtil.constructJzwLc(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),""+j,lcmc);
							jzwlcMapper.insertSelective(jzwlc);
							
							int one_width=0;//每个房间宽度
							int one_width_sp = 0;//不能整除的情况
							if ((widthMax*KConstants.jzwWidth)%mcfjs==0) {//能整除
								one_width = (widthMax*KConstants.jzwWidth)/mcfjs;//设置该层每间地下室宽度
							}else{
								one_width = ((widthMax*KConstants.jzwWidth)-((widthMax*KConstants.jzwWidth)%mcfjs))/mcfjs;
								one_width_sp = one_width+(widthMax*KConstants.jzwWidth)%mcfjs;//最后一个房间宽度加上余数
							}
							
							for(int m=0;m<mcfjs;m++){
								//构造房间
								int height=KConstants.jzwHeight;//70;
							
								int top=(lcMax-j)*height;
								int width=one_width;
								if(((widthMax*KConstants.jzwWidth)%mcfjs!=0)&&(m==mcfjs-1)){
									width = one_width_sp;
								}
								int left=leftWidthSum+m*width;
								//处理房间名称  长度+后缀
								 String fjmc= j+((m+1)<10?("0"+(m+1)):(""+(m+1)));
								 fjmc = JzwJgUtil.processWithAndPostfix(fjmc,width_fj,postfix_fj);
								
								//房间名称添加前缀
								for (int k = 0; k < prefixRules.size(); k++) {
									Map<String, Object> pmap = prefixRules.get(k);
									int from =Integer.MIN_VALUE;
									int to   =Integer.MIN_VALUE;
									try{
										from=Integer.parseInt((String)pmap.get("from")); if(from<0){AlertSLEUtil.Error("房间号前缀起始楼层不能小于0");}
										to = Integer.parseInt((String)pmap.get("to"));	if(to<0){  AlertSLEUtil.Error("房间号前缀结束楼层不能小于0");}
									}catch(Exception e){
										throw new ServiceLogicalException("数据转化错误，请检查房间号前缀起始、结束楼层是否是数字");
									}
									String value = (String)map.get("value");//前缀
									if ((j>=from)&&(j<=to) ) {
										fjmc = value+fjmc;
									}
								}
								//不再带有单元楼层前缀
								String fjxh=j+((m+1)<10?("0"+(m+1)):(""+(m+1)));
								JzwFjShowInPage page=new JzwFjShowInPage(1,  left,  top,width,  height);
								Jzwfj jzwfj=JzwJgUtil.constructJzwFj(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),jzwlc.getJzwlcid(),fjxh,fjmc,page);
								jzwfj.setCreatedby(SecurityUtils.getUserId());
								jzwfjList.add(jzwfj);
							}
						}
					}
				}
				leftWidthSum+=dyWidthMaxMap.get(d+1);
			}
			//添加规则分单元地下室
			if ("1".equals(type)) {
				int ls_totalH=lcs*KConstants.jzwHeight;
				for(int c=0;c<dxcsx;c++){//遍历地下层数
					//处理楼层名称  长度+后缀
					String lcmc = "-"+JzwJgUtil.processWithAndPostfix((c+1)+"",width_lc,postfix_lc);
					
					Jzwlc jzwlc=JzwJgUtil.constructJzwLc(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),"-"+(c+1),lcmc);
					
					jzwlcMapper.insertSelective(jzwlc);
					
					//ArrayList<Jzwfj> jzwfjList = Lists.newArrayList();
					for(int f=0;f<dxmcmsx;f++){//地下每层门数（规则情况下与楼上每层门数相同）
						
						int dx_width=KConstants.jzwWidth;//120;
						int dx_height=KConstants.jzwHeight;//70;
						int dx_left=((dxmcmsx*d)+f)*dx_width;
						int dx_top=c*dx_height+ls_totalH;
						//处理房间名称  长度+后缀
						 String fjmc= "-"+(c+1)+((f+1)<10?("0"+(f+1)):(""+(f+1)));
						 fjmc = JzwJgUtil.processWithAndPostfix(fjmc,width_fj,postfix_fj);
//						fjmc=dymc+lcmc+fjmc;
						
//						String fjxh=(d+1)+"-(-"+(c+1)+")-"+(c+1)+"0"+(f+1);
						String fjxh="-"+(c+1)+((f+1)<10?("0"+(f+1)):(""+(f+1)));
						
						JzwFjShowInPage page=new JzwFjShowInPage(1,dx_left,dx_top,dx_width,dx_height);
						Jzwfj jzwfj=JzwJgUtil.constructJzwFj(jzwjg.getJzwjgid(),jzwdy.getJzwdyid(),
																		jzwlc.getJzwlcid(),fjxh,fjmc,page);
						jzwfj.setCreatedby(SecurityUtils.getUserId());
						jzwfjList.add(jzwfj);
					}
					//jzwfjMapper.batchInsertJzwfj(jzwfjList);
				}
			}
		}
		
		//添加不规则分单元地下室
		if ("2".equals(type)) {
			
			List<Map<String, Object>> dxlc = (List<Map<String, Object>>)view.get("dxlc");
			KAssert.notEmpty(jzwjgMap, "请填写地下楼层结构数据");
			
			int ls_totalW=dys*fjs*KConstants.jzwWidth;//该建筑物总宽度
			int ls_totalH=lcs*KConstants.jzwHeight;
			int dxlcs = Integer.MIN_VALUE;
			int mcms = Integer.MIN_VALUE;
			//设置所属建筑物结构dxcs为dxlc.size()
			jzwjg.setDxcs(Short.parseShort(dxlc.size()+""));
			
			jzwjgMapper.updateJzwjg(jzwjg);
			
			for (int i = 0; i < dxlc.size(); i++) {
				
				Map<String, Object> map = dxlc.get(i);
				try{
					dxlcs=dxlc.size();
					//dxlcs=Integer.parseInt(String.valueOf(map.get("dxlcs"))); if(dxlcs<0){AlertSLEUtil.Error("地下楼层数不能小于0");}
					mcms = Integer.parseInt(String.valueOf(map.get("mcms"))); if(mcms<0){  AlertSLEUtil.Error("地下每层房间数不能小于0");}
				}catch(Exception e){
					throw new ServiceLogicalException("数据转化错误，请检查地下楼层数、地下每层房间数 是否数字");
				}
				
				int one_width=0;//每个房间宽度
				int one_width_sp = 0;//不能整除的情况
				one_width = ls_totalW/mcms;//设置该层每间地下室宽度
				if (ls_totalW%mcms==0) {//能整除
					one_width = ls_totalW/mcms;//设置该层每间地下室宽度
				}else{
					one_width = (ls_totalW-ls_totalW%mcms)/mcms;
					one_width_sp = one_width+ls_totalW%mcms;//最后一个房间宽度加上余数
				}
				//处理楼层名称  长度+后缀
				String dxlcmc = "-"+JzwJgUtil.processWithAndPostfix((i+1)+"",width_lc,postfix_lc);
				Jzwlc jzwlc=JzwJgUtil.constructJzwLc(jzwjg.getJzwjgid(),dxJzwdyId,"-"+(i+1),dxlcmc);
				jzwlcMapper.insertSelective(jzwlc);
				
//				ArrayList<Jzwfj> jzwfjList = Lists.newArrayList();
				
				for (int j = 0; j < mcms; j++) {//地下楼层向下排列
					int width = 0;
					if ((one_width_sp!=0)&&(j==mcms-1)) {//如果ls_totalW/mcms不能整除的话，最后一个房间宽度加上余数
						width = one_width_sp;
					}else {
						width = one_width;
					}
					int height=KConstants.jzwHeight;//70;
					int top = i*height+ls_totalH;//top值等于楼上总高度加上地下层的高度
					int left= j*one_width;//
					int dxlcIndex=i+1;
					
					String fjmc= "-"+dxlcIndex+((j+1)<10?("0"+(j+1)):(""+(j+1)));
					 fjmc = JzwJgUtil.processWithAndPostfix(fjmc,width_fj,postfix_fj);
//					fjmc=dxlcmc+fjmc;
					String fjxh="-"+dxlcIndex+((j+1)<10?("0"+(j+1)):(""+(j+1)));
//					String fjxh=1+"-(-"+(i+1)+")-"+(i+1)+"0"+(j+1);
					
					JzwFjShowInPage page=new JzwFjShowInPage(1,left,top,width,height);
					Jzwfj jzwfj=JzwJgUtil.constructJzwFj(jzwjg.getJzwjgid(),dxJzwdyId,jzwlc.getJzwlcid(),fjxh,fjmc,page);
					jzwfjList.add(jzwfj);
				}
//				jzwfjMapper.batchInsertJzwfj(jzwfjList);
			}
		}
		if(jzwfjList!=null&&jzwfjList.size()>0){
			jzwfjMapper.batchInsertJzwfj(jzwfjList);
		}
		
		Long t2 = System.currentTimeMillis();
		System.out.println("起始："+t1);
		System.out.println("结束："+t2);
		System.out.println("执行耗时："+(t2-t1)/1000);
	}

	@SuppressWarnings({"rawtypes", "unchecked" })
	private void validateMap(Map view){
		Map<String, Object> postfixAndWidthRule = (Map<String, Object>)view.get("postfixAndWidthRule");
		
		KAssert.notEmpty(postfixAndWidthRule, "数据有误 ，单元号、楼层号、房间号 位数，不能为空，请检查。");
		
		Map<String, Object> jzwjgMap = (Map<String, Object>)view.get("jzwjg");
		KAssert.notEmpty(jzwjgMap, "数据有误,请检查数据。");
		
		String jzwId = (String)view.get("jzwId");//建筑物Id
		
		String width_dy = (String)postfixAndWidthRule.get("width_dy");//单元号位数
		String width_lc =(String)postfixAndWidthRule.get("width_lc");//楼层号位数
		String width_fj =(String)postfixAndWidthRule.get("width_fj");//房间号位数
		try{
			Integer int_width_dy=Integer.parseInt(width_dy); if(int_width_dy<0){AlertSLEUtil.Error("单元号位数不能小于0");}
			Integer int_width_lc=Integer.parseInt(width_lc); if(int_width_lc<0){AlertSLEUtil.Error("楼层号位数不能小于0");}
			Integer int_width_fj=Integer.parseInt(width_fj); if(int_width_fj<0){AlertSLEUtil.Error("房间号位数不能小于0");}
		}catch(Exception e){
			throw new ServiceLogicalException("数据转化错误，请检查单元号位数、楼层号位数、房间号位数数等数是否是数字");
		}
		
		String dys_ =(String) jzwjgMap.get("dys");
		String lcs_ = (String)jzwjgMap.get("lcs");
		String mdyms = (String) jzwjgMap.get("mdyms");
		
		KAssert.hasText(jzwId, "数据有误,请重新打开页面填写数据。");
		KAssert.hasText(width_dy+"", "数据有误,请填写单元号位数。");
		KAssert.hasText(width_lc+"", "数据有误,请填写楼层号位数。");
		KAssert.hasText(width_fj+"", "数据有误,请填写房间号位数。");
		KAssert.hasText(dys_, "数据有误,请填写单元数。");
		KAssert.hasText(lcs_, "数据有误,请填写楼层数。");
		KAssert.hasText(mdyms, "数据有误,请填写每单元门数。");
	}
	
	@Transactional(rollbackFor=Exception.class)
	@Override
	public Jzwjg findJzwjgById(String jzwjgId) {
		if(!StringUtils.hasText(jzwjgId)){
			return null;
		}
		Jzwjg jzwjg = jzwjgMapper.selectByPrimaryKey(jzwjgId);
		List<Jzwlc> lcxhList = jzwlcMapper.selectLcxhByJzwJgid(jzwjgId);
		KAssert.notEmpty(lcxhList, "该建筑物没有【楼层】数据，请在建筑物维护部分进行维护。");
		
		List<Jzwdy> dyxhList = jzwdyMapper.selectDyxhByJzwJgid(jzwjgId);
		KAssert.notEmpty(dyxhList, "该建筑物没有【单元】数据，请在建筑物维护部分进行维护。");
		
		String validate_lcxh ="";
		String validate_dyxh ="";
		//如果单元序号、楼层序号 未进行校验  或者 未通过检验，则进行检验
		if (!(KConstants.ISVALID_JZWJG_YES.equals(jzwjg.getIsvalid()))) {
			validate_lcxh = JzwJgUtil.validate_Lc_Dy_XH_DtaType(lcxhList,"jzwlc");
			validate_dyxh = JzwJgUtil.validate_Lc_Dy_XH_DtaType(dyxhList,"jzwdy");
		}
		//检验不通过
		if (!("".equals(validate_lcxh))||!("".equals(validate_dyxh))) {
			jzwjg.setIsvalid(KConstants.ISVALID_JZWJG_NO);//检验不通过
			AlertSLEUtil.FormatError(validate_lcxh+validate_dyxh);
			//---检验不通过。往下代码不会执行
		}
		//---检验通过
		//单元序号 楼层序号校验通过后要进行生成房间坐标操作 
		//如果建筑物中房间未生成坐标，则要进行生成操作                                        1
		if (jzwjg.getIsbuild()==null||!(KConstants.ISBUILD_JZWJG.equals(jzwjg.getIsbuild()))) {
			//生成房间
			buildJzwfjZB(jzwjgId);
			//建筑物结构生成标志位设为已生成状态
			jzwjg.setIsbuild(KConstants.ISBUILD_JZWJG);
			jzwjgMapper.updateJzwjg(jzwjg);
		}
		
		//检验通过，才会执行--校验通过->此时没有Isvalid填值，此时 进行填值，如果已经填值，则不进行填值
		//如果建筑物结构ISVALID字段为NULL或者为未通过状态，则将其改为通过状态
//		if (jzwjg.getIsvalid()==null||KConstants.ISVALID_JZWJG_NO.equals(jzwjg.getIsvalid())) {
		if (!(KConstants.ISVALID_JZWJG_YES.equals(jzwjg.getIsvalid()))) {
			jzwjg.setIsvalid(KConstants.ISVALID_JZWJG_YES);
			jzwjgMapper.updateJzwjg(jzwjg);//检验通过
		}
		return jzwjg;
		
	}
	
	/**
	 * 遍历建筑物中所有单元楼层房间，为房间生成坐标
	 * @param jzwjg
	 */
	@Transactional(rollbackFor=Exception.class,readOnly=true)
	private void buildJzwfjZB(String jzwjgId){
		List<Jzwdy> jzwdyList = jzwdyMapper.selectJzwdyByJzwJgid(jzwjgId);
		List<Jzwfj> targetJzwfjList = Lists.newArrayList();
		
		//遍历单元
		for (int i = 0; i < jzwdyList.size(); i++) {
			Jzwdy jzwdy = jzwdyList.get(i);
			int dyms = jzwdy.getDyms();//单元门数
			//查出该单元下的楼层
			List<Jzwlc> jzwlcList = jzwlcMapper.selectJzwlcByJzwdyid(jzwdy.getJzwdyid());
			//遍历该单元的楼层
			for (int j = 0; j < jzwlcList.size(); j++) {
				Jzwlc jzwlc = jzwlcList.get(j);
				//查出该楼层下的房间
				List<Jzwfj> jzwfjList = jzwfjMapper.selectJzwfjByJzwlcId(jzwlc.getJzwlcid());
				if(jzwfjList==null){
					jzwfjList=Collections.emptyList();
				}
				//遍历该单元该层所有房间
				for (int k = 0; k < jzwfjList.size(); k++) {
					Date date= new Date();
					Jzwfj jzwfj = jzwfjList.get(k);
					int width=KConstants.jzwWidth;//120;
					int height=KConstants.jzwHeight;//70;
//					int left=((dyms*i)+k)*width;
					int left=((jzwfjList.size()*i)+k)*width;
					int top=(jzwlcList.size()-(j+1))*height;
					
					String showInfo = ""+left+","+top+","+width+","+height;
					jzwfj.setShowInfo(showInfo);
					jzwfj.setZhgxrq(date);
					jzwfj.setUpdated(date);
					jzwfj.setUpdatedby(SecurityUtils.getSessionUser().getUserId());
					jzwfj.setShowMode("1");
					targetJzwfjList.add(jzwfj);
//					jzwfjMapper.updateJzwfj(jzwfj);
				}
			}
		}
		if(!CollectionUtils.isEmpty(targetJzwfjList) ){
			jzwfjMapper.batchUpdateJzwfj(targetJzwfjList);
		}
		
	}
	/**
	 * //var parm={"refJzwFjId":targetIdArray[0] ,"jzwId":jzwjgId,"addfjmc":addfjxh,"addfjxh":addfjxh};
	 * true
	 * @param refFjId
	 * @param jzwjgid
	 * @param isUpDown true:楼顶添加   false： 地下添加
	 * @return
	 */
	public KJSONMSG canAdd(String refFjId,String jzwjgid,boolean isUpDown){
		Jzwfj refFj=jzwfjMapper.selectByPrimaryKey(refFjId);
		int refFjtop=JzwJgUtil.getTop(refFj);
		int refFjleft=JzwJgUtil.getLeft(refFj);
		int refFjright=JzwJgUtil.getRight(refFj);
		
		List<Jzwfj> fjList= jzwfjMapper.selectFjByJzwjgId( jzwjgid);
		for(Jzwfj fj :fjList){
			int targetTopp=JzwJgUtil.getTop(fj);
			int targetLeft=JzwJgUtil.getLeft(fj);
			int targetRight=JzwJgUtil.getRight(fj);
			//楼顶                                                                                                              
			if(isUpDown&&targetTopp<refFjtop&&(targetTopp+KConstants.jzwHeight)>(refFjtop-KConstants.jzwHeight)){
				if(targetLeft>=refFjleft&&targetLeft<refFjright){
					return new KJSONMSG(300, "该房间之上已经存在房间，不可添加", false);
				}
				if(targetRight>refFjleft&&targetRight<=refFjright){
					return new KJSONMSG(300, "该房间之上已经存在房间，不可添加", false);
				}
				if(targetLeft<=refFjleft&&targetRight>=refFjright){
					return new KJSONMSG(300, "该房间之上已经存在房间，不可添加", false);
				}
			}
			 //地下 	  (isUpDown&&targetTopp<refFjtop)||(!isUpDown&&targetTopp>refFjtop)
			if(!isUpDown&&targetTopp>refFjtop&&targetTopp<(refFjtop+2*KConstants.jzwHeight)){
				if(targetLeft>=refFjleft&&targetLeft<refFjright){
					return new KJSONMSG(300, "该房间之下已经存在房间，不可添加", false);
				}
				if(targetRight>refFjleft&&targetRight<=refFjright){
					return new KJSONMSG(300, "该房间之下已经存在房间，不可添加", false);
				}
				if(targetLeft<=refFjleft&&targetRight>=refFjright){
					return new KJSONMSG(300, "该房间之下已经存在房间，不可添加", false);
				}
			}
		}
		return new KJSONMSG(200, "", true);
	}
	
	public KJSONMSG canAddDown(String refFjId,String jzwjgid){
		Jzwfj refFj=jzwfjMapper.selectByPrimaryKey(refFjId);
		
		int refFjtop=JzwJgUtil.getTop(refFj);
		int refFjleft=JzwJgUtil.getLeft(refFj);
		int refFjright=JzwJgUtil.getRight(refFj);
		
		
		List<Jzwfj> fjList= jzwfjMapper.selectFjByJzwjgId( jzwjgid);
		for(Jzwfj fj :fjList){
			int targetTopp=JzwJgUtil.getTop(fj);
			int targetLeft=JzwJgUtil.getLeft(fj);
			int targetRight=JzwJgUtil.getRight(fj);
			
			System.out.println("");
			if(targetTopp>refFjtop){
				
				if(targetLeft>=refFjleft&&targetLeft<refFjright){
					return new KJSONMSG(300, "该房间之上已经存在房间，不可添加", false);
				}
				if(targetRight>refFjleft&&targetRight<=refFjright){
					return new KJSONMSG(300, "该房间之上已经存在房间，不可添加", false);
				}
				if(targetLeft<=refFjleft&&targetRight>=refFjright){
					return new KJSONMSG(300, "该房间之上已经存在房间，不可添加", false);
				}
			}
		}
		return new KJSONMSG(200, "", true);
	}
//	@Transactional(rollbackFor = Exception.class,readOnly=true)
//	@Override
//	public Jzwjg findJzwjgId(String jzwjgid) {
//		if(!StringUtils.hasText(jzwjgid)){
//			return null;
//		}
//		return jzwjgMapper.selectByPrimaryKey(jzwjgid);
//	}
	
	@Transactional(rollbackFor = Exception.class,readOnly=true)
	@Override
	public DataSet loadJzwjgDyLcInfo(Map<String,String> params) {
		PaginationUtil.initPageAndSort(params);  
		String jzwjgid = params.get("jzwjgid");
		if(jzwjgid==null||jzwjgid.isEmpty()){
			return DataSet.newDs();
		}
		params.put("jzwjgid", jzwjgid);
		return new DataSet(jzwjgMapper.selectJzwjgDyLcCount(params), jzwjgMapper.selectJzwjgDyLcInfo(params));

	}
	//{xh=001, jgtype=dy, mc=1单元, id=a2021891-a4f0-4949-b962-ebfa60f49d77}
	@SuppressWarnings("rawtypes")
	@Transactional(rollbackFor=Exception.class)
	@Override
	public void updateJzwjgDyLcXh(Map view) {
		KAssert.notNull(view, "未提交数据");
		String xh=(String) view.get("xh");
		String jgtype=(String) view.get("jgtype");
		String mc=(String) view.get("mc");
		String id=(String) view.get("id");
		KAssert.notNull(xh, "序号为空，请检查");
		KAssert.notNull(jgtype, "未知类型");
		KAssert.notNull(mc, "名称为空，请检查");
	try{
		Integer.parseInt(xh);
		}catch(Exception e){
			AlertSLEUtil.Error("序号只能填写数字，请检查");
		}
		Date date = new Date();
		String jzwjgId="";
		if("dy".equals(jgtype)){
			Jzwdy dy = jzwdyMapper.selectByPrimaryKey(id);
			dy.setDyxh(xh);
			dy.setDymc(mc);
			dy.setZhgxrq(date);	
			jzwjgId = dy.getJzwjgid();
			jzwdyMapper.updateJzwdy(dy);
		}else if("lc".equals(jgtype)){
			Jzwlc lc = jzwlcMapper.selectByPrimaryKey(id);
			lc.setLcxh(xh);
			lc.setLcmc(mc);
			lc.setZhgxrq(date);
			jzwjgId = lc.getJzwjgid();
			jzwlcMapper.updateJzwlc(lc);
		}
		//更新建筑物结构ISBUILD字段和ISVALID字段为null
		Jzwjg jzwjg = jzwjgMapper.selectByPrimaryKey(jzwjgId);
		if (jzwjg!=null) {
			jzwjgMapper.resetJzwjg(jzwjg);
		}
	}
	@Override
	public Jzwjg findJzwjgByJzwId(String jzwid) {
		if(!StringUtils.hasText(jzwid)){
			return null;
		}
		return jzwjgMapper.selectByJzwId(jzwid);
	}
}
